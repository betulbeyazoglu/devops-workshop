AWSTemplateFormatVersion: 2010-09-09
Description:  "Testing"
​
Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair

Resources:      
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": "ec2-user"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  
  EC2InstanceConnectECRFullAccess:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
  
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnectECRFullAccess
  
    
  DockerMachinesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP and HTTPs for Docker Machines
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
​
  DockerGrand-Master:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-038b5c5d2ad6a5090
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: EC2InstanceConnectECRFullAccess
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Grand Master of ${AWS::StackName}
      UserData: 
        Fn::Base64: !Sub |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Grand-Master
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install git -y 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          docker swarm init
          docker service create \
          --name=viz \
          --publish=8080:8080/tcp \
          --constraint=node.role==manager \
          --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
          dockersamples/visualizer
          yum install amazon-ecr-credential-helper
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          mkdir -p /home/ec2-user/.docker
          cd /home/ec2-user/.docker
          echo '{"credsStore": "ecr-login"}' > config.json
          cd /home/ec2-user/
          aws ecr create-repository --repository-name bb4it/phonebook-app --region us-east-1
          mkdir app && cd app
          docker build -t bb4it/phonebook-app .
          docker tag bb4it/phonebook-app:latest 375516740190.dkr.ecr.us-east-1.amazonaws.com/bb4it/phonebook-app:latest 
          docker push 375516740190.dkr.ecr.us-east-1.amazonaws.com/bb4it/phonebook-app:latest
          docker stack deploy --compose-file docker-compose.yml 
  
  ManagerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - DockerGrand-Master
    Properties:
      ImageId: ami-038b5c5d2ad6a5090
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceConnectECRFullAccess
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Docker-Manager
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install -y python-pip
          pip install ec2instanceconnectcli
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          # ./aws/install
          $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ${DockerGrand-Master} docker swarm join-token manager | grep docker)

  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - DockerGrand-Master
    Properties:
      ImageId: ami-038b5c5d2ad6a5090
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceConnectECRFullAccess
      SecurityGroupIds:
        - !GetAtt DockerMachinesSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          yum update -y
          hostnamectl set-hostname Docker-Worker
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          yum install -y python-pip
          pip install ec2instanceconnectcli
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          # ./aws/install
          $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ${DockerGrand-Master} docker swarm join-token worker | grep docker)
  
  WorkerInstance1:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - DockerGrand-Master
    Properties:
      LaunchTemplate: !Ref WorkerLaunchTemplate    
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Worker 1 of ${AWS::StackName}
      
  WorkerInstance2:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - DockerGrand-Master
    Properties:
      LaunchTemplate:  !Ref WorkerLaunchTemplate   
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Worker 2 of ${AWS::StackName}
    
  ManagerInstance1:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - DockerGrand-Master
    Properties:
      LaunchTemplate: !Ref ManagerLaunchTemplate     
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Manager 1 of ${AWS::StackName}
  
  ManagerInstance2:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - DockerGrand-Master
    Properties:
      LaunchTemplate: !Ref ManagerLaunchTemplate    
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Manager 2 of ${AWS::StackName}

  
Outputs:
 DockerGrand-MasterDNSName:
    Description: Docker Manager DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt DockerGrand-Master.PublicDnsName
 
 DockerWorkerDNSName:
    Description: Visualization URL
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt DockerGrand-Master.PublicDnsName










